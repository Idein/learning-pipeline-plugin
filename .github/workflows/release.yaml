name: Release Learning Pipeline Plugin

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7"]
    steps:
    - uses: actions/checkout@v3
    - name: Install poetry
      run: pipx install poetry
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    - name: Install dependencies
      run: poetry install
    - name: Type Check
      run: |
        poetry run mypy learning_pipeline_plugin
    - name: Lint
      run: |
        poetry run pycodestyle learning_pipeline_plugin
    - name: Newline Check
      run: |
        CR_FILES=$(echo $(grep -Ul $'\r'$ `find ./ -type f -regex ".*\(Dockerfile\|\.gitignore\|\.html\|\.json\|\.md\|\.py\|\.sh\|\.ts\|\.tsx\|\.txt\|\.yml\)$" -not -wholename '*.git/*'`))
        if [[ $CR_FILES != "" ]]; then
          CR_FILES=($CR_FILES)
          for f in ${CR_FILES[@]} ; do echo $f ; done
          echo "CRLF detected." >&2;
          exit 1;
        fi
    - name: Test
      run: poetry run pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    env:
      python-version: 3.7
    steps:
    - uses: actions/checkout@v3
    - name: Install poetry
      run: pipx install poetry
    - name: Set up Python ${{ env.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.python-version }}
        cache: 'poetry'
    - name: Install dependencies
      run: poetry install
    - name: Build
      id: build
      run: |
        poetry build
        wheel_path=$(ls dist/*.whl)
        echo "wheel_path=${wheel_path}" >> $GITHUB_OUTPUT
        echo "wheel_name=${wheel_path##*/}" >> $GITHUB_OUTPUT
    - name: Publish PyPI
      run: |
        poetry publish --username '${{secrets.PYPI_USERNAME}}' --password '${{secrets.PYPI_PASSWORD}}'
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.build.outputs.wheel_path }}
        asset_name: ${{ steps.build.outputs.wheel_name }}
        asset_content_type: application/x-wheel+zip
